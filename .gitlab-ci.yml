workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - when: never

stages:
  - build
  - docker
  - deploy

variables:
  # GitLab Container Registry 이미지 경로
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHA

build:
  stage: build
  image: gradle:8.10.2-jdk17
  cache:
    key: gradle-cache
    paths:
      - .gradle
      - build
  script:
    - ./gradlew clean build
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 day

docker_build:
  stage: docker
  image: docker:latest
  services:
    - name: docker:dind
  variables:
    # TLS 비활성화
    DOCKER_TLS_CERTDIR: ""   
    DOCKER_HOST: tcp://docker:2375
  script:
    # GitLab Registry 로그인 (CI_REGISTRY_USER와 CI_REGISTRY_PASSWORD는 GitLab이 자동으로 제공)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    
    # 이미지 빌드
    - docker build -t $REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $REGISTRY_IMAGE:$IMAGE_TAG
    
    # latest 태그 추가
    - docker tag $REGISTRY_IMAGE:$IMAGE_TAG $REGISTRY_IMAGE:latest
    - docker push $REGISTRY_IMAGE:latest

deploy_to_ec2:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "
        # GitLab Registry 로그인
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        
        # 새 이미지 pull
        docker pull $REGISTRY_IMAGE:$IMAGE_TAG &&
        
        # 기존 컨테이너 정리
        (docker stop app_container || true) &&
        (docker rm app_container || true) &&
        
        # 새 컨테이너 실행
        docker run -d --name app_container \
          --restart unless-stopped \
          -p 8080:8080 \
          $REGISTRY_IMAGE:$IMAGE_TAG &&
        
        # 미사용 이미지 정리
        docker image prune -f"
